language: python
group: travis_latest
dist: xenial
sudo: true

env:
    global:
        - github_master="https://github.com/${TRAVIS_REPO_SLUG}/archive/master.zip"
        - pip_command="pip"
        - python_command="python"
        - WINEDEBUG=fixme-all       # switch off wine fix me messages

addons:
    apt:
        packages:
            - xvfb      # install xvfb virtual framebuffer - this we need for WINE
            - winbind   # needed for WINE

services:   # start services
  - xvfb    # is needed for WINE on headless installation


matrix:
    include:
    - os: windows
      language: sh
      name: "Windows Python 2.7"

      # oddly a secure password under env: global: causes that choco fails
      # so we need to put the option : filter_secrets: false
      # this can be a security issue, check that You dont leak secrets here !
      filter_secrets: false
      before_install:
          - git clone https://github.com/bitranox/lib_bash.git /usr/lib/lib_bash
          - chmod -R 0755 /usr/lib/lib_bash
          - chmod -R +x /usr/lib/lib_bash/*.sh
          - /usr/lib/lib_bash/lib_retry.sh retry choco install python2
          - export PATH="/c/Python27:/c/Python27/Scripts:$PATH"

    - os: windows
      language: sh
      name: "Windows Python 3.7"

      # oddly a secure password under env: global: causes that choco fails
      # so we need to put the option : filter_secrets: false
      # this can be a security issue, check that You dont leak secrets here !
      filter_secrets: false
      before_install:
          - git clone https://github.com/bitranox/lib_bash.git /usr/lib/lib_bash
          - chmod -R 0755 /usr/lib/lib_bash
          - chmod -R +x /usr/lib/lib_bash/*.sh
          - /usr/lib/lib_bash/lib_retry.sh retry choco install python3
          - export PATH="/c/Python37:/c/Python37/Scripts:$PATH"

    - os: linux
      language: python
      name: "WINE stable 32 Bit Python 2.7.16, Windows XP"
      env:
          - WINEARCH="win32"
          - WINEPREFIX="${HOME}/wine/wine32"
          - CMDPREFIX="wine"
          - wine_windows_version="winxp"
          - wine_release="stable"
          - wine_python_version="python2"

    - os: linux
      language: python
      name: "WINE stable 64 Bit Python 2.7.16, Windows XP"
      env:
          - WINEPREFIX="${HOME}/wine/wine64"
          - CMDPREFIX="wine"
          - wine_windows_version="winxp"
          - wine_release="stable"
          - wine_python_version="python2"

    - os: linux
      language: python
      name: "WINE stable 32 Bit Python 3.7.3, Windows XP"
      env:
          - WINEARCH="win32"
          - WINEPREFIX="${HOME}/wine/wine32"
          - CMDPREFIX="wine"
          - wine_windows_version="winxp"
          - wine_release="stable"
          - wine_python_version="python3"

    - os: linux
      language: python
      name: "WINE stable 64 Bit Python 3.7.3, Windows XP"
      env:
          - WINEPREFIX="${HOME}/wine/wine64"
          - CMDPREFIX="wine"
          - wine_windows_version="winxp"
          - wine_release="stable"
          - wine_python_version="python3"

    - os: linux
      language: python
      name: "WINE stable 32 Bit Python 2.7.16, Windows 10"
      env:
          - WINEARCH="win32"
          - WINEPREFIX="${HOME}/wine/wine32"
          - CMDPREFIX="wine"
          - wine_windows_version="win10"
          - wine_release="stable"
          - wine_python_version="python2"

    - os: linux
      language: python
      name: "WINE stable 64 Bit Python 2.7.16, Windows 10"
      env:
          - WINEPREFIX="${HOME}/wine/wine64"
          - CMDPREFIX="wine"
          - wine_windows_version="win10"
          - wine_release="stable"
          - wine_python_version="python2"

    - os: linux
      language: python
      name: "WINE stable 32 Bit Python 3.7.3, Windows 10"
      env:
          - WINEARCH="win32"
          - WINEPREFIX="${HOME}/wine/wine32"
          - CMDPREFIX="wine"
          - wine_windows_version="win10"
          - wine_release="stable"
          - wine_python_version="python3"

    - os: linux
      language: python
      name: "WINE stable 64 Bit Python 3.7.3, Windows 10"
      env:
          - WINEPREFIX="${HOME}/wine/wine64"
          - CMDPREFIX="wine"
          - wine_windows_version="win10"
          - wine_release="stable"
          - wine_python_version="python3"
      before_install:
          - export mypy_static_typecheck="True"
          - export build_docs="True"
          - export deploy_on_pypi="True"

    - os: linux
      language: python
      name: "WINE devel 32 Bit Python 2.7.16, Windows XP"
      env:
          - WINEARCH="win32"
          - WINEPREFIX="${HOME}/wine/wine32"
          - CMDPREFIX="wine"
          - wine_windows_version="winxp"
          - wine_release="devel"
          - wine_python_version="python2"

    - os: linux
      language: python
      name: "WINE devel 64 Bit Python 2.7.16, Windows XP"
      env:
          - WINEPREFIX="${HOME}/wine/wine64"
          - CMDPREFIX="wine"
          - wine_windows_version="winxp"
          - wine_release="devel"
          - wine_python_version="python2"

    - os: linux
      language: python
      name: "WINE devel 32 Bit Python 3.7.3, Windows XP"
      env:
          - WINEARCH="win32"
          - WINEPREFIX="${HOME}/wine/wine32"
          - CMDPREFIX="wine"
          - wine_windows_version="winxp"
          - wine_release="devel"
          - wine_python_version="python3"

    - os: linux
      language: python
      name: "WINE devel 64 Bit Python 3.7.3, Windows XP"
      env:
          - WINEPREFIX="${HOME}/wine/wine64"
          - CMDPREFIX="wine"
          - wine_windows_version="winxp"
          - wine_release="devel"
          - wine_python_version="python3"

    - os: linux
      language: python
      name: "WINE devel 32 Bit Python 2.7.16, Windows 10"
      env:
          - WINEARCH="win32"
          - WINEPREFIX="${HOME}/wine/wine32"
          - CMDPREFIX="wine"
          - wine_windows_version="win10"
          - wine_release="devel"
          - wine_python_version="python2"

    - os: linux
      language: python
      name: "WINE devel 64 Bit Python 2.7.16, Windows 10"
      env:
          - WINEPREFIX="${HOME}/wine/wine64"
          - CMDPREFIX="wine"
          - wine_windows_version="win10"
          - wine_release="devel"
          - wine_python_version="python2"

    - os: linux
      language: python
      name: "WINE devel 32 Bit Python 3.7.3, Windows 10"
      env:
          - WINEARCH="win32"
          - WINEPREFIX="${HOME}/wine/wine32"
          - CMDPREFIX="wine"
          - wine_windows_version="win10"
          - wine_release="devel"
          - wine_python_version="python3"

    - os: linux
      language: python
      name: "WINE devel 64 Bit Python 3.7.3, Windows 10"
      env:
          - WINEPREFIX="${HOME}/wine/wine64"
          - CMDPREFIX="wine"
          - wine_windows_version="win10"
          - wine_release="devel"
          - wine_python_version="python3"

    - os: linux
      language: python
      name: "WINE staging 32 Bit Python 2.7.16, Windows XP"
      env:
          - WINEARCH="win32"
          - WINEPREFIX="${HOME}/wine/wine32"
          - CMDPREFIX="wine"
          - wine_windows_version="winxp"
          - wine_release="staging"
          - wine_python_version="python2"

    - os: linux
      language: python
      name: "WINE staging 64 Bit Python 2.7.16, Windows XP"
      env:
          - WINEPREFIX="${HOME}/wine/wine64"
          - CMDPREFIX="wine"
          - wine_windows_version="winxp"
          - wine_release="staging"
          - wine_python_version="python2"

    - os: linux
      language: python
      name: "WINE staging 32 Bit Python 3.7.3, Windows XP"
      env:
          - WINEARCH="win32"
          - WINEPREFIX="${HOME}/wine/wine32"
          - CMDPREFIX="wine"
          - wine_windows_version="winxp"
          - wine_release="staging"
          - wine_python_version="python3"

    - os: linux
      language: python
      name: "WINE staging 64 Bit Python 3.7.3, Windows XP"
      env:
          - WINEPREFIX="${HOME}/wine/wine64"
          - CMDPREFIX="wine"
          - wine_windows_version="winxp"
          - wine_release="staging"
          - wine_python_version="python3"

    - os: linux
      language: python
      name: "WINE staging 32 Bit Python 2.7.16, Windows 10"
      env:
          - WINEARCH="win32"
          - WINEPREFIX="${HOME}/wine/wine32"
          - CMDPREFIX="wine"
          - wine_windows_version="win10"
          - wine_release="staging"
          - wine_python_version="python2"

    - os: linux
      language: python
      name: "WINE staging 64 Bit Python 2.7.16, Windows 10"
      env:
          - WINEPREFIX="${HOME}/wine/wine64"
          - CMDPREFIX="wine"
          - wine_windows_version="win10"
          - wine_release="staging"
          - wine_python_version="python2"

    - os: linux
      language: python
      name: "WINE staging 32 Bit Python 3.7.3, Windows 10"
      env:
          - WINEARCH="win32"
          - WINEPREFIX="${HOME}/wine/wine32"
          - CMDPREFIX="wine"
          - wine_windows_version="win10"
          - wine_release="staging"
          - wine_python_version="python3"

    - os: linux
      language: python
      name: "WINE staging 64 Bit Python 3.7.3, Windows 10"
      env:
          - WINEPREFIX="${HOME}/wine/wine64"
          - CMDPREFIX="wine"
          - wine_windows_version="win10"
          - wine_release="staging"
          - wine_python_version="python3"

install:
    # install lib_bash_wine - this installs also lib_bash
    - if [[ -f /usr/bin/sudo ]]; then export sudo_command="sudo"; else export sudo_command=""; fi
    - ${sudo_command} git clone https://github.com/bitranox/lib_bash_wine.git /usr/lib/lib_bash_wine
    - ${sudo_command} chmod -R 0755 /usr/lib/lib_bash_wine
    - ${sudo_command} chmod -R +x /usr/lib/lib_bash_wine/*.sh
    - ${sudo_command} /usr/lib/lib_bash_wine/install_or_update_lib_bash_wine.sh
    - export lib_bash_color="/usr/lib/lib_bash/lib_color.sh"
    - export lib_bash_banner="/usr/lib/lib_bash/lib_helpers.sh banner"
    - export lib_bash_banner_warning="/usr/lib/lib_bash/lib_helpers.sh banner_warning"
    - export lib_bash_wine="/usr/lib/lib_bash_wine"

    - export REPOSITORY_NAME=${TRAVIS_REPO_SLUG#*/} && ${lib_bash_color} clr_bold clr_green "Export Repository Name ${REPOSITORY_NAME}"
    - if [[ ${CMDPREFIX} == "wine" ]]; then ${lib_bash_wine}/001_000_install_wine.sh ; fi
    - if [[ ${CMDPREFIX} == "wine" ]]; then ${lib_bash_wine}/002_000_install_wine_machine.sh ; fi
    - if [[ ${wine_python_version} == "python2" ]]; then ${lib_bash_wine}/003_000_install_wine_python2_preinstalled.sh ; fi
    - if [[ ${wine_python_version} == "python3" ]]; then ${lib_bash_wine}/003_001_install_wine_python3_preinstalled.sh ; fi
    - if [[ ${CMDPREFIX} == "wine" ]]; then ${lib_bash_wine}/004_000_install_wine_git_portable.sh ; fi
    # - if [[ ${CMDPREFIX} == "wine" ]]; then ${lib_bash_wine}/005_001_install_wine_powershell_core.sh ; fi

    - ${lib_bash_banner} "upgrading pip"
    - ${CMDPREFIX} ${python_command} -m pip install --upgrade pip
    - if [[ $TRAVIS_PYTHON_VERSION == pypy3.5-6.0 ]]; then ${CMDPREFIX} ${pip_command} install "pytest-cov==2.6.0"; fi
    # mypy does not run on pypy 3.5 - we only do mypy on python 3.6
    - if [[ "${mypy_static_typecheck}" == "True" ]]; then ${lib_bash_banner} "install mypy" && ${CMDPREFIX} ${pip_command} install mypy; fi
    - if [[ "${build_docs}" == "True" ]]; then ${lib_bash_banner} "install rst_include (Building Docs)" && ${CMDPREFIX} ${pip_command} install rst_include; fi
    - ${lib_bash_banner} "install codecov" && ${CMDPREFIX} ${pip_command} install codecov
    - ${lib_bash_banner} "install pytest" && ${CMDPREFIX} ${pip_command} install pytest pytest-pep8 pytest-cov
    - ${lib_bash_banner} "install dill" && ${CMDPREFIX} ${pip_command} install dill
    - if [[ -f setup.py ]]; then export setup_py_found="True" && ${lib_bash_banner} "setup.py found" ; else ${lib_bash_banner_warning} "no setup.py found, nothing to test" ; fi
    - if [[ "${setup_py_found}" == "True" ]]; then ${lib_bash_banner} "Installing Application" && ${CMDPREFIX} ${pip_command} install -e . ; fi

script:
    - if [[ "${setup_py_found}" == "True" ]]; then ${lib_bash_banner} "running setup.py --install-option test" && ${CMDPREFIX} ${pip_command} install ${github_master} --install-option test ; else ${lib_bash_banner_warning} "no setup.py found, no setup.py --install-option test" ; fi
    - if [[ "${setup_py_found}" == "True" ]]; then ${lib_bash_banner} "running pytest" && ${CMDPREFIX} ${python_command} -m pytest --pep8 --cov ; else ${lib_bash_banner_warning} "no setup.py found, no pytest" ; fi
    - if [[ "${mypy_static_typecheck}" == "True" ]]; then ${lib_bash_banner} "running mypy static typechecks" && ${CMDPREFIX} ${python_command} -m mypy -p ${REPOSITORY_NAME}; else ${lib_bash_banner_warning} "static typechecking disabled on this build" ;  fi
    - if [[ -f build_docs.py ]] && [[ "${build_docs}" == "True" ]]; then ${lib_bash_banner} "Building Docs" && ${CMDPREFIX} ${python_command} build_docs.py ${TRAVIS_REPO_SLUG}; else ${lib_bash_banner_warning} "Building Docs disabled on this build" ;  fi

after_success:
    - ${CMDPREFIX} coverage report
    - ${CMDPREFIX} codecov

    # This works for sure - but might expose the secure password within the matrix,
    # because windows builds need filter_secrets: false at the Moment (2019-04-12)
    # - if [[ ${deploy_on_pypi} == "True" ]] && [[ -n ${TRAVIS_TAG} ]]; then ${CMDPREFIX} ${pip_command} install -U twine ; fi
    # - if [[ ${deploy_on_pypi} == "True" ]] && [[ -n ${TRAVIS_TAG} ]]; then ${CMDPREFIX} ${pip_command} install wheel ; fi
    # - if [[ ${deploy_on_pypi} == "True" ]] && [[ -n ${TRAVIS_TAG} ]]; then ${CMDPREFIX} ${python_command} setup.py sdist bdist_wheel ; fi
    # - if [[ ${deploy_on_pypi} == "True" ]] && [[ -n ${TRAVIS_TAG} ]]; then ${CMDPREFIX} twine upload --repository-url https://upload.pypi.org/legacy/ -u bitranox -p ${pypi_password} dist/* ; fi


# the password needs to be encrypted pointing to ${deploy.password}
# make a backup before adding secrets by travis gem, all comments in the yml files get lost !
# password needs to be created from the project directory for every repository with ruby gem travis:   travis encrypt "*******" --add deploy.password --org
# option --org for travis.org, --com for travis.com

# secure key for lib_registry !!!
deploy:
  provider: pypi
  user: bitranox
  password:
    secure: kdMcSYO402ALgUKeIM7w+vOOSwwYKtF7L0W/WxSdBl0pLkGd91pJ3fJH0P3WzFvJmU/JzVevj3SDShNuXSwQm/vD7HHKvwh/keJ1L4QjFFCVwRzB+JQ1VfVnXHGQQP5JnK3aBBdJpC7xPJa8bSYuCUHptGZELna87ANPTtVwLZakWScGWBx843A7Kw5HSmhQvdr1j+WzcJxYlTo5m8d8F0DQZ9JixfglzutEocSm53tymlgQoL8Y8DZ9/H0rrVA3lkkEEONSDQonmys7Pm0hOQ1Xui0S7Fj1LJADLhFrjs8HxQo+BbdePbocTp5GYChEjpR1w0fnvTP7ebes23OukRACubVVZnqW41gK3lztRikUuumGBFfylB66BhLJPQQHVJxLSVSZQQgomcRyn8qlKg2MbOhp+l+MaIL+8VB0k4Tjaf00o84qHxsDRRQuEQ1MDP9ekrf0PrUmGZj3aZVY+SsF+BAsHL4uGcJhfadDrFXx/YFzD5FGP7aTcpRPDinrJ86JnTFdBR0xWPVuQFRN2wrP/YnjUnH47H5e0Ciye6OxJYfaHkUm7Q9cw9mcYl7S5ljPFTm3iUG8mZleDKDMin1lvj3oewqRtpDfkewd42nEKcoX4N09NY4PylsZAEk3uR7sYOPjoVOFjRtIxNXewHMaTrat8aLxJ5jPrK86qks=
  distributions: "sdist bdist_wheel"
  on:
    tags: true
    # python: 3.6
    # we need this, because on projects with windows builds only, we can not build on windows, because of
    # the filter_secure issue. So we build on WINE, but need somehow to address the matrix include on which to build
    condition: ${deploy_on_pypi} = "True"

notifications:
  email:
    recipients:
        - rnowotny@rotek.at
    on_success: never # default: change
    on_failure: always # default: always
